{"ast":null,"code":"var _jsxFileName = \"/Users/vonreifschneider/VSCodeProjects/lena/pairs-game/src/components/Cards/Cards.tsx\",\n  _s2 = $RefreshSig$();\nimport Card from '../Card/Card';\nimport { schuffledCards } from '../../utils/schuffledCards.util';\nimport { useEffect, useState } from 'react';\nimport './Cards.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cards = () => {\n  _s2();\n  const [cardProps, setCardProps] = useState([]);\n  const [clickedCardSrc, setClickedCardSrc] = useState('');\n  const [clickedCardId, setClickedCardId] = useState(0);\n  useEffect(() => {\n    setCardProps(schuffledCards());\n  }, []);\n  const handleClick = id => {\n    var _s = $RefreshSig$();\n    _s(setCardProps(_s(prevState => {\n      _s();\n      let newCardProps = prevState.map(card => card.id === id ? {\n        ...card,\n        flipped: !card.flipped\n      } : card);\n      const clickedCard = newCardProps.find(card => card.id === id);\n      useEffect(() => {\n        console.log('clickedCard:', clickedCard);\n      }, [clickedCard]);\n      console.log('clickedCard', clickedCard);\n      if (clickedCardSrc === '') {\n        console.log('clickedCaed.src', clickedCard.src, clickedCard.id);\n        setClickedCardSrc(clickedCard.src);\n        setClickedCardId(clickedCard.id);\n        console.log('clickedCardSrc', clickedCardSrc);\n      } else if (clickedCard.src === clickedCardSrc && clickedCard.id !== id) {\n        console.log('matched');\n        newCardProps = newCardProps.map(card => card.src === clickedCardSrc ? {\n          ...card,\n          flipped: true,\n          matched: true,\n          disabled: true\n        } : card);\n        setClickedCardSrc('');\n      } else {\n        console.log('not matched', clickedCard.id, id);\n        setClickedCardSrc('');\n        setCardProps(prevState => {\n          return prevState.map(card => {\n            return {\n              ...card,\n              disabled: true\n            };\n          });\n        });\n        setTimeout(() => {\n          setCardProps(prevState => prevState.map(card => !card.matched ? {\n            ...card,\n            flipped: false,\n            disabled: false\n          } : card));\n        }, 1000);\n      }\n      console.log('newCardProps', newCardProps);\n      return newCardProps;\n    }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cards\",\n    children: cardProps.map(props => /*#__PURE__*/_jsxDEV(Card, {\n      id: props.id,\n      src: props.src,\n      flipped: props.flipped,\n      matched: props.matched,\n      disabled: props.disabled,\n      onClick: () => handleClick(props.id)\n    }, props.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s2(Cards, \"mSkT39JwOCg0Vp91NPiRHpgRP0o=\");\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["Card","schuffledCards","useEffect","useState","jsxDEV","_jsxDEV","Cards","_s2","cardProps","setCardProps","clickedCardSrc","setClickedCardSrc","clickedCardId","setClickedCardId","handleClick","id","_s","$RefreshSig$","prevState","newCardProps","map","card","flipped","clickedCard","find","console","log","src","matched","disabled","setTimeout","className","children","props","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vonreifschneider/VSCodeProjects/lena/pairs-game/src/components/Cards/Cards.tsx"],"sourcesContent":["import Card from '../Card/Card'\nimport { schuffledCards } from '../../utils/schuffledCards.util';\nimport { useEffect, useState } from 'react';\nimport { CardProps } from '../Card/Card';\nimport './Cards.css';\n\n\nconst Cards = () => {\n    const [cardProps, setCardProps] = useState<CardProps[]>([])\n    const [clickedCardSrc, setClickedCardSrc] = useState<string>('')\n    const [clickedCardId, setClickedCardId] = useState<number>(0)\n    useEffect(() => {\n        setCardProps(schuffledCards())\n    }, [])\n\n    const handleClick = (id: number) => {\n\n        setCardProps((prevState) => {\n            let newCardProps = prevState.map((card) =>\n                card.id === id ? { ...card, flipped: !card.flipped } : card\n            )\n\n            const clickedCard = newCardProps.find((card) => card.id === id)\n\n            useEffect(() => {\n                console.log('clickedCard:', clickedCard)\n            }, [clickedCard])\n            console.log('clickedCard', clickedCard)\n\n            if (clickedCardSrc === '') {\n                console.log('clickedCaed.src',clickedCard!.src, clickedCard!.id)\n                setClickedCardSrc(clickedCard!.src)\n                setClickedCardId(clickedCard!.id)\n                console.log('clickedCardSrc', clickedCardSrc)\n            }\n\n            else if (clickedCard!.src === clickedCardSrc && clickedCard!.id !== id) {\n                console.log('matched')\n                newCardProps = newCardProps.map((card) =>\n                    card.src === clickedCardSrc ? { ...card, flipped: true, matched: true, disabled: true } : card)\n                setClickedCardSrc('')\n            }\n\n            else {\n                console.log('not matched', clickedCard!.id, id)\n                setClickedCardSrc('')\n                setCardProps((prevState) => {\n                    return prevState.map((card) => {\n                        return { ...card, disabled: true }\n                    })\n                })\n\n                setTimeout(() => {\n                    setCardProps((prevState) =>\n                        prevState.map((card) =>\n                            !card.matched ? { ...card, flipped: false, disabled: false } : card\n                        ))\n                }, 1000)\n            }\n            console.log('newCardProps', newCardProps)\n            return newCardProps;\n        })\n    }\n\n    return (\n        <div className=\"cards\">\n            {cardProps.map((props) => (\n                <Card\n                    key={props.id}\n                    id={props.id}\n                    src={props.src}\n                    flipped={props.flipped}\n                    matched={props.matched}\n                    disabled={props.disabled}\n                    onClick={() => handleClick(props.id)}></Card>\n            )\n            )}\n        </div>\n    )\n}\n\nexport default Cards;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}